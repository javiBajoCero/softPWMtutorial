
softpwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080022c8  080022c8  000122c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022e8  080022e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080022e8  080022e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022e8  080022e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022e8  080022e8  000122e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022ec  080022ec  000122ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  2000000c  080022fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  080022fc  00020680  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089c5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000174e  00000000  00000000  000289fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002a148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002ab28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016734  00000000  00000000  0002b450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a22b  00000000  00000000  00041b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084170  00000000  00000000  0004bdaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cff1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b8  00000000  00000000  000cff74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080022b0 	.word	0x080022b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080022b0 	.word	0x080022b0

0800014c <zeroSoftPWM>:
static void MX_DMA_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void zeroSoftPWM(uint32_t softpwmbuffer[]){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; ++ i) {
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
 8000158:	e008      	b.n	800016c <zeroSoftPWM+0x20>
			softpwmbuffer[i]=0;
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	009b      	lsls	r3, r3, #2
 800015e:	687a      	ldr	r2, [r7, #4]
 8000160:	4413      	add	r3, r2
 8000162:	2200      	movs	r2, #0
 8000164:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; ++ i) {
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	3301      	adds	r3, #1
 800016a:	60fb      	str	r3, [r7, #12]
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	2b63      	cmp	r3, #99	; 0x63
 8000170:	d9f3      	bls.n	800015a <zeroSoftPWM+0xe>
}
}
 8000172:	bf00      	nop
 8000174:	bf00      	nop
 8000176:	3714      	adds	r7, #20
 8000178:	46bd      	mov	sp, r7
 800017a:	bc80      	pop	{r7}
 800017c:	4770      	bx	lr

0800017e <setSoftPWM>:

void setSoftPWM(uint16_t pin, uint32_t duty ,uint32_t *softpwmbuffer){
 800017e:	b480      	push	{r7}
 8000180:	b087      	sub	sp, #28
 8000182:	af00      	add	r7, sp, #0
 8000184:	4603      	mov	r3, r0
 8000186:	60b9      	str	r1, [r7, #8]
 8000188:	607a      	str	r2, [r7, #4]
 800018a:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; ++ i) {
 800018c:	2300      	movs	r3, #0
 800018e:	617b      	str	r3, [r7, #20]
 8000190:	e03d      	b.n	800020e <setSoftPWM+0x90>
		if(i<duty){//set pin
 8000192:	697a      	ldr	r2, [r7, #20]
 8000194:	68bb      	ldr	r3, [r7, #8]
 8000196:	429a      	cmp	r2, r3
 8000198:	d21b      	bcs.n	80001d2 <setSoftPWM+0x54>
			softpwmbuffer[i]&=(uint32_t)~(pin<<16);
 800019a:	697b      	ldr	r3, [r7, #20]
 800019c:	009b      	lsls	r3, r3, #2
 800019e:	687a      	ldr	r2, [r7, #4]
 80001a0:	4413      	add	r3, r2
 80001a2:	681a      	ldr	r2, [r3, #0]
 80001a4:	89fb      	ldrh	r3, [r7, #14]
 80001a6:	041b      	lsls	r3, r3, #16
 80001a8:	43db      	mvns	r3, r3
 80001aa:	4618      	mov	r0, r3
 80001ac:	697b      	ldr	r3, [r7, #20]
 80001ae:	009b      	lsls	r3, r3, #2
 80001b0:	6879      	ldr	r1, [r7, #4]
 80001b2:	440b      	add	r3, r1
 80001b4:	4002      	ands	r2, r0
 80001b6:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i]|=(uint32_t)pin;
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	687a      	ldr	r2, [r7, #4]
 80001be:	4413      	add	r3, r2
 80001c0:	6819      	ldr	r1, [r3, #0]
 80001c2:	89fa      	ldrh	r2, [r7, #14]
 80001c4:	697b      	ldr	r3, [r7, #20]
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	6878      	ldr	r0, [r7, #4]
 80001ca:	4403      	add	r3, r0
 80001cc:	430a      	orrs	r2, r1
 80001ce:	601a      	str	r2, [r3, #0]
 80001d0:	e01a      	b.n	8000208 <setSoftPWM+0x8a>
		}else{//reset pin
			softpwmbuffer[i]&=(uint32_t)~(pin);
 80001d2:	697b      	ldr	r3, [r7, #20]
 80001d4:	009b      	lsls	r3, r3, #2
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	89fb      	ldrh	r3, [r7, #14]
 80001de:	43db      	mvns	r3, r3
 80001e0:	4618      	mov	r0, r3
 80001e2:	697b      	ldr	r3, [r7, #20]
 80001e4:	009b      	lsls	r3, r3, #2
 80001e6:	6879      	ldr	r1, [r7, #4]
 80001e8:	440b      	add	r3, r1
 80001ea:	4002      	ands	r2, r0
 80001ec:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i]|=(uint32_t)pin<<16;
 80001ee:	697b      	ldr	r3, [r7, #20]
 80001f0:	009b      	lsls	r3, r3, #2
 80001f2:	687a      	ldr	r2, [r7, #4]
 80001f4:	4413      	add	r3, r2
 80001f6:	6819      	ldr	r1, [r3, #0]
 80001f8:	89fb      	ldrh	r3, [r7, #14]
 80001fa:	041a      	lsls	r2, r3, #16
 80001fc:	697b      	ldr	r3, [r7, #20]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	4403      	add	r3, r0
 8000204:	430a      	orrs	r2, r1
 8000206:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; ++ i) {
 8000208:	697b      	ldr	r3, [r7, #20]
 800020a:	3301      	adds	r3, #1
 800020c:	617b      	str	r3, [r7, #20]
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	2b63      	cmp	r3, #99	; 0x63
 8000212:	d9be      	bls.n	8000192 <setSoftPWM+0x14>
		}
	}

}
 8000214:	bf00      	nop
 8000216:	bf00      	nop
 8000218:	371c      	adds	r7, #28
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fc7b 	bl	8000b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f923 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fa7d 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 fa4d 	bl	80006d0 <MX_DMA_Init>
  MX_TIM4_Init();
 8000236:	f000 f9ff 	bl	8000638 <MX_TIM4_Init>
  MX_TIM1_Init();
 800023a:	f000 f961 	bl	8000500 <MX_TIM1_Init>
  MX_TIM2_Init();
 800023e:	f000 f9af 	bl	80005a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //start the timers
HAL_TIM_Base_Start(&htim1);
 8000242:	4880      	ldr	r0, [pc, #512]	; (8000444 <main+0x224>)
 8000244:	f001 fda4 	bl	8001d90 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim2);
 8000248:	487f      	ldr	r0, [pc, #508]	; (8000448 <main+0x228>)
 800024a:	f001 fda1 	bl	8001d90 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 800024e:	487f      	ldr	r0, [pc, #508]	; (800044c <main+0x22c>)
 8000250:	f001 fd9e 	bl	8001d90 <HAL_TIM_Base_Start>

//configure DMAs
HAL_DMA_Start(&hdma_tim1_up, 	(uint32_t)&(dataA[0]), (uint32_t)&(GPIOA->BSRR), sizeof(dataA)/sizeof(dataA[0]));
 8000254:	497e      	ldr	r1, [pc, #504]	; (8000450 <main+0x230>)
 8000256:	2364      	movs	r3, #100	; 0x64
 8000258:	4a7e      	ldr	r2, [pc, #504]	; (8000454 <main+0x234>)
 800025a:	487f      	ldr	r0, [pc, #508]	; (8000458 <main+0x238>)
 800025c:	f000 fe4e 	bl	8000efc <HAL_DMA_Start>
HAL_DMA_Start(&hdma_tim2_up, 	(uint32_t)&(dataB[0]), (uint32_t)&(GPIOB->BSRR), sizeof(dataB)/sizeof(dataB[0]));
 8000260:	497e      	ldr	r1, [pc, #504]	; (800045c <main+0x23c>)
 8000262:	2364      	movs	r3, #100	; 0x64
 8000264:	4a7e      	ldr	r2, [pc, #504]	; (8000460 <main+0x240>)
 8000266:	487f      	ldr	r0, [pc, #508]	; (8000464 <main+0x244>)
 8000268:	f000 fe48 	bl	8000efc <HAL_DMA_Start>
HAL_DMA_Start(&hdma_tim4_up, 	(uint32_t)&(dataC[0]), (uint32_t)&(GPIOC->BSRR), sizeof(dataC)/sizeof(dataC[0]));
 800026c:	497e      	ldr	r1, [pc, #504]	; (8000468 <main+0x248>)
 800026e:	2364      	movs	r3, #100	; 0x64
 8000270:	4a7e      	ldr	r2, [pc, #504]	; (800046c <main+0x24c>)
 8000272:	487f      	ldr	r0, [pc, #508]	; (8000470 <main+0x250>)
 8000274:	f000 fe42 	bl	8000efc <HAL_DMA_Start>

//start DMAs
__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000278:	4b72      	ldr	r3, [pc, #456]	; (8000444 <main+0x224>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	68da      	ldr	r2, [r3, #12]
 800027e:	4b71      	ldr	r3, [pc, #452]	; (8000444 <main+0x224>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000286:	60da      	str	r2, [r3, #12]
__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 8000288:	4b6f      	ldr	r3, [pc, #444]	; (8000448 <main+0x228>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	68da      	ldr	r2, [r3, #12]
 800028e:	4b6e      	ldr	r3, [pc, #440]	; (8000448 <main+0x228>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000296:	60da      	str	r2, [r3, #12]
__HAL_TIM_ENABLE_DMA(&htim4, TIM_DMA_UPDATE);
 8000298:	4b6c      	ldr	r3, [pc, #432]	; (800044c <main+0x22c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	68da      	ldr	r2, [r3, #12]
 800029e:	4b6b      	ldr	r3, [pc, #428]	; (800044c <main+0x22c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80002a6:	60da      	str	r2, [r3, #12]

//ill use o as a main variable for this tutorial
uint32_t o=0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	607b      	str	r3, [r7, #4]
//im afraid of SRAMs not being initialised to 0
zeroSoftPWM(dataA);
 80002ac:	4868      	ldr	r0, [pc, #416]	; (8000450 <main+0x230>)
 80002ae:	f7ff ff4d 	bl	800014c <zeroSoftPWM>
zeroSoftPWM(dataB);
 80002b2:	486a      	ldr	r0, [pc, #424]	; (800045c <main+0x23c>)
 80002b4:	f7ff ff4a 	bl	800014c <zeroSoftPWM>
zeroSoftPWM(dataC);
 80002b8:	486b      	ldr	r0, [pc, #428]	; (8000468 <main+0x248>)
 80002ba:	f7ff ff47 	bl	800014c <zeroSoftPWM>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //GPIO bank A
	  setSoftPWM(GPIO_PIN_0, o, (uint32_t*)&dataA);
 80002be:	4a64      	ldr	r2, [pc, #400]	; (8000450 <main+0x230>)
 80002c0:	6879      	ldr	r1, [r7, #4]
 80002c2:	2001      	movs	r0, #1
 80002c4:	f7ff ff5b 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_1, o, (uint32_t*)&dataA);
 80002c8:	4a61      	ldr	r2, [pc, #388]	; (8000450 <main+0x230>)
 80002ca:	6879      	ldr	r1, [r7, #4]
 80002cc:	2002      	movs	r0, #2
 80002ce:	f7ff ff56 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_2, o, (uint32_t*)&dataA);
 80002d2:	4a5f      	ldr	r2, [pc, #380]	; (8000450 <main+0x230>)
 80002d4:	6879      	ldr	r1, [r7, #4]
 80002d6:	2004      	movs	r0, #4
 80002d8:	f7ff ff51 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_3, o, (uint32_t*)&dataA);
 80002dc:	4a5c      	ldr	r2, [pc, #368]	; (8000450 <main+0x230>)
 80002de:	6879      	ldr	r1, [r7, #4]
 80002e0:	2008      	movs	r0, #8
 80002e2:	f7ff ff4c 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_4, o, (uint32_t*)&dataA);
 80002e6:	4a5a      	ldr	r2, [pc, #360]	; (8000450 <main+0x230>)
 80002e8:	6879      	ldr	r1, [r7, #4]
 80002ea:	2010      	movs	r0, #16
 80002ec:	f7ff ff47 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_5, o, (uint32_t*)&dataA);
 80002f0:	4a57      	ldr	r2, [pc, #348]	; (8000450 <main+0x230>)
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	2020      	movs	r0, #32
 80002f6:	f7ff ff42 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_6, o, (uint32_t*)&dataA);
 80002fa:	4a55      	ldr	r2, [pc, #340]	; (8000450 <main+0x230>)
 80002fc:	6879      	ldr	r1, [r7, #4]
 80002fe:	2040      	movs	r0, #64	; 0x40
 8000300:	f7ff ff3d 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_7, o, (uint32_t*)&dataA);
 8000304:	4a52      	ldr	r2, [pc, #328]	; (8000450 <main+0x230>)
 8000306:	6879      	ldr	r1, [r7, #4]
 8000308:	2080      	movs	r0, #128	; 0x80
 800030a:	f7ff ff38 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_8, o, (uint32_t*)&dataA);
 800030e:	4a50      	ldr	r2, [pc, #320]	; (8000450 <main+0x230>)
 8000310:	6879      	ldr	r1, [r7, #4]
 8000312:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000316:	f7ff ff32 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_9, o, (uint32_t*)&dataA);
 800031a:	4a4d      	ldr	r2, [pc, #308]	; (8000450 <main+0x230>)
 800031c:	6879      	ldr	r1, [r7, #4]
 800031e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000322:	f7ff ff2c 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_10, o, (uint32_t*)&dataA);
 8000326:	4a4a      	ldr	r2, [pc, #296]	; (8000450 <main+0x230>)
 8000328:	6879      	ldr	r1, [r7, #4]
 800032a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800032e:	f7ff ff26 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_11, o, (uint32_t*)&dataA);
 8000332:	4a47      	ldr	r2, [pc, #284]	; (8000450 <main+0x230>)
 8000334:	6879      	ldr	r1, [r7, #4]
 8000336:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800033a:	f7ff ff20 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_12, o, (uint32_t*)&dataA);
 800033e:	4a44      	ldr	r2, [pc, #272]	; (8000450 <main+0x230>)
 8000340:	6879      	ldr	r1, [r7, #4]
 8000342:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000346:	f7ff ff1a 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_15, o, (uint32_t*)&dataA);
 800034a:	4a41      	ldr	r2, [pc, #260]	; (8000450 <main+0x230>)
 800034c:	6879      	ldr	r1, [r7, #4]
 800034e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000352:	f7ff ff14 	bl	800017e <setSoftPWM>
	  //GPIO bank B
	  setSoftPWM(GPIO_PIN_0, o, (uint32_t*)&dataB);
 8000356:	4a41      	ldr	r2, [pc, #260]	; (800045c <main+0x23c>)
 8000358:	6879      	ldr	r1, [r7, #4]
 800035a:	2001      	movs	r0, #1
 800035c:	f7ff ff0f 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_1, o, (uint32_t*)&dataB);
 8000360:	4a3e      	ldr	r2, [pc, #248]	; (800045c <main+0x23c>)
 8000362:	6879      	ldr	r1, [r7, #4]
 8000364:	2002      	movs	r0, #2
 8000366:	f7ff ff0a 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_2, o, (uint32_t*)&dataB);
 800036a:	4a3c      	ldr	r2, [pc, #240]	; (800045c <main+0x23c>)
 800036c:	6879      	ldr	r1, [r7, #4]
 800036e:	2004      	movs	r0, #4
 8000370:	f7ff ff05 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_3, o, (uint32_t*)&dataB);
 8000374:	4a39      	ldr	r2, [pc, #228]	; (800045c <main+0x23c>)
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	2008      	movs	r0, #8
 800037a:	f7ff ff00 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_4, o, (uint32_t*)&dataB);
 800037e:	4a37      	ldr	r2, [pc, #220]	; (800045c <main+0x23c>)
 8000380:	6879      	ldr	r1, [r7, #4]
 8000382:	2010      	movs	r0, #16
 8000384:	f7ff fefb 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_5, o, (uint32_t*)&dataB);
 8000388:	4a34      	ldr	r2, [pc, #208]	; (800045c <main+0x23c>)
 800038a:	6879      	ldr	r1, [r7, #4]
 800038c:	2020      	movs	r0, #32
 800038e:	f7ff fef6 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_6, o, (uint32_t*)&dataB);
 8000392:	4a32      	ldr	r2, [pc, #200]	; (800045c <main+0x23c>)
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	2040      	movs	r0, #64	; 0x40
 8000398:	f7ff fef1 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_7, o, (uint32_t*)&dataB);
 800039c:	4a2f      	ldr	r2, [pc, #188]	; (800045c <main+0x23c>)
 800039e:	6879      	ldr	r1, [r7, #4]
 80003a0:	2080      	movs	r0, #128	; 0x80
 80003a2:	f7ff feec 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_8, o, (uint32_t*)&dataB);
 80003a6:	4a2d      	ldr	r2, [pc, #180]	; (800045c <main+0x23c>)
 80003a8:	6879      	ldr	r1, [r7, #4]
 80003aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003ae:	f7ff fee6 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_9, o, (uint32_t*)&dataB);
 80003b2:	4a2a      	ldr	r2, [pc, #168]	; (800045c <main+0x23c>)
 80003b4:	6879      	ldr	r1, [r7, #4]
 80003b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003ba:	f7ff fee0 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_10, o, (uint32_t*)&dataB);
 80003be:	4a27      	ldr	r2, [pc, #156]	; (800045c <main+0x23c>)
 80003c0:	6879      	ldr	r1, [r7, #4]
 80003c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80003c6:	f7ff feda 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_11, o, (uint32_t*)&dataB);
 80003ca:	4a24      	ldr	r2, [pc, #144]	; (800045c <main+0x23c>)
 80003cc:	6879      	ldr	r1, [r7, #4]
 80003ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80003d2:	f7ff fed4 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_12, o, (uint32_t*)&dataB);
 80003d6:	4a21      	ldr	r2, [pc, #132]	; (800045c <main+0x23c>)
 80003d8:	6879      	ldr	r1, [r7, #4]
 80003da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80003de:	f7ff fece 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_13, o, (uint32_t*)&dataB);
 80003e2:	4a1e      	ldr	r2, [pc, #120]	; (800045c <main+0x23c>)
 80003e4:	6879      	ldr	r1, [r7, #4]
 80003e6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80003ea:	f7ff fec8 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_14, o, (uint32_t*)&dataB);
 80003ee:	4a1b      	ldr	r2, [pc, #108]	; (800045c <main+0x23c>)
 80003f0:	6879      	ldr	r1, [r7, #4]
 80003f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80003f6:	f7ff fec2 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_15, o, (uint32_t*)&dataB);
 80003fa:	4a18      	ldr	r2, [pc, #96]	; (800045c <main+0x23c>)
 80003fc:	6879      	ldr	r1, [r7, #4]
 80003fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000402:	f7ff febc 	bl	800017e <setSoftPWM>
	  //GPIO bank C
	  setSoftPWM(GPIO_PIN_13, o, (uint32_t*)&dataC);
 8000406:	4a18      	ldr	r2, [pc, #96]	; (8000468 <main+0x248>)
 8000408:	6879      	ldr	r1, [r7, #4]
 800040a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800040e:	f7ff feb6 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_14, o, (uint32_t*)&dataC);
 8000412:	4a15      	ldr	r2, [pc, #84]	; (8000468 <main+0x248>)
 8000414:	6879      	ldr	r1, [r7, #4]
 8000416:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800041a:	f7ff feb0 	bl	800017e <setSoftPWM>
	  setSoftPWM(GPIO_PIN_15, o, (uint32_t*)&dataC);
 800041e:	4a12      	ldr	r2, [pc, #72]	; (8000468 <main+0x248>)
 8000420:	6879      	ldr	r1, [r7, #4]
 8000422:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000426:	f7ff feaa 	bl	800017e <setSoftPWM>

	  //thats it 33 PWM pins looping 0-100 duty cycle yeeey
	  o++;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	3301      	adds	r3, #1
 800042e:	607b      	str	r3, [r7, #4]
	  if(o>100){
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2b64      	cmp	r3, #100	; 0x64
 8000434:	d901      	bls.n	800043a <main+0x21a>
		  o=0;
 8000436:	2300      	movs	r3, #0
 8000438:	607b      	str	r3, [r7, #4]
	  }
	  HAL_Delay(10);
 800043a:	200a      	movs	r0, #10
 800043c:	f000 fbd2 	bl	8000be4 <HAL_Delay>
	  setSoftPWM(GPIO_PIN_0, o, (uint32_t*)&dataA);
 8000440:	e73d      	b.n	80002be <main+0x9e>
 8000442:	bf00      	nop
 8000444:	20000564 	.word	0x20000564
 8000448:	200005f0 	.word	0x200005f0
 800044c:	20000028 	.word	0x20000028
 8000450:	20000244 	.word	0x20000244
 8000454:	40010810 	.word	0x40010810
 8000458:	200005ac 	.word	0x200005ac
 800045c:	200003d4 	.word	0x200003d4
 8000460:	40010c10 	.word	0x40010c10
 8000464:	20000070 	.word	0x20000070
 8000468:	200000b4 	.word	0x200000b4
 800046c:	40011010 	.word	0x40011010
 8000470:	20000638 	.word	0x20000638

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b090      	sub	sp, #64	; 0x40
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	f107 0318 	add.w	r3, r7, #24
 800047e:	2228      	movs	r2, #40	; 0x28
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f001 ff0c 	bl	80022a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000496:	2301      	movs	r3, #1
 8000498:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800049a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800049e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a4:	2301      	movs	r3, #1
 80004a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a8:	2302      	movs	r3, #2
 80004aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b8:	f107 0318 	add.w	r3, r7, #24
 80004bc:	4618      	mov	r0, r3
 80004be:	f001 f82f 	bl	8001520 <HAL_RCC_OscConfig>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004c8:	f000 f9b6 	bl	8000838 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004cc:	230f      	movs	r3, #15
 80004ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d0:	2302      	movs	r3, #2
 80004d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2102      	movs	r1, #2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 fa9a 	bl	8001a20 <HAL_RCC_ClockConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004f2:	f000 f9a1 	bl	8000838 <Error_Handler>
  }
}
 80004f6:	bf00      	nop
 80004f8:	3740      	adds	r7, #64	; 0x40
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000506:	f107 0308 	add.w	r3, r7, #8
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000514:	463b      	mov	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800051c:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <MX_TIM1_Init+0x98>)
 800051e:	4a1f      	ldr	r2, [pc, #124]	; (800059c <MX_TIM1_Init+0x9c>)
 8000520:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <MX_TIM1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <MX_TIM1_Init+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <MX_TIM1_Init+0x98>)
 8000530:	2231      	movs	r2, #49	; 0x31
 8000532:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_TIM1_Init+0x98>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MX_TIM1_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_TIM1_Init+0x98>)
 8000542:	2200      	movs	r2, #0
 8000544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000546:	4814      	ldr	r0, [pc, #80]	; (8000598 <MX_TIM1_Init+0x98>)
 8000548:	f001 fbd2 	bl	8001cf0 <HAL_TIM_Base_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000552:	f000 f971 	bl	8000838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800055a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800055c:	f107 0308 	add.w	r3, r7, #8
 8000560:	4619      	mov	r1, r3
 8000562:	480d      	ldr	r0, [pc, #52]	; (8000598 <MX_TIM1_Init+0x98>)
 8000564:	f001 fc5e 	bl	8001e24 <HAL_TIM_ConfigClockSource>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800056e:	f000 f963 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000572:	2320      	movs	r3, #32
 8000574:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800057a:	463b      	mov	r3, r7
 800057c:	4619      	mov	r1, r3
 800057e:	4806      	ldr	r0, [pc, #24]	; (8000598 <MX_TIM1_Init+0x98>)
 8000580:	f001 fe0c 	bl	800219c <HAL_TIMEx_MasterConfigSynchronization>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800058a:	f000 f955 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000564 	.word	0x20000564
 800059c:	40012c00 	.word	0x40012c00

080005a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b4:	463b      	mov	r3, r7
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <MX_TIM2_Init+0x94>)
 80005be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <MX_TIM2_Init+0x94>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_TIM2_Init+0x94>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_TIM2_Init+0x94>)
 80005d2:	2231      	movs	r2, #49	; 0x31
 80005d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_TIM2_Init+0x94>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_TIM2_Init+0x94>)
 80005de:	2200      	movs	r2, #0
 80005e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005e2:	4814      	ldr	r0, [pc, #80]	; (8000634 <MX_TIM2_Init+0x94>)
 80005e4:	f001 fb84 	bl	8001cf0 <HAL_TIM_Base_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80005ee:	f000 f923 	bl	8000838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	4619      	mov	r1, r3
 80005fe:	480d      	ldr	r0, [pc, #52]	; (8000634 <MX_TIM2_Init+0x94>)
 8000600:	f001 fc10 	bl	8001e24 <HAL_TIM_ConfigClockSource>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800060a:	f000 f915 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800060e:	2320      	movs	r3, #32
 8000610:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000616:	463b      	mov	r3, r7
 8000618:	4619      	mov	r1, r3
 800061a:	4806      	ldr	r0, [pc, #24]	; (8000634 <MX_TIM2_Init+0x94>)
 800061c:	f001 fdbe 	bl	800219c <HAL_TIMEx_MasterConfigSynchronization>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000626:	f000 f907 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200005f0 	.word	0x200005f0

08000638 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_TIM4_Init+0x90>)
 8000656:	4a1d      	ldr	r2, [pc, #116]	; (80006cc <MX_TIM4_Init+0x94>)
 8000658:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_TIM4_Init+0x90>)
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_TIM4_Init+0x90>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50-1;
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_TIM4_Init+0x90>)
 8000668:	2231      	movs	r2, #49	; 0x31
 800066a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_TIM4_Init+0x90>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_TIM4_Init+0x90>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000678:	4813      	ldr	r0, [pc, #76]	; (80006c8 <MX_TIM4_Init+0x90>)
 800067a:	f001 fb39 	bl	8001cf0 <HAL_TIM_Base_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000684:	f000 f8d8 	bl	8000838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	4619      	mov	r1, r3
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <MX_TIM4_Init+0x90>)
 8000696:	f001 fbc5 	bl	8001e24 <HAL_TIM_ConfigClockSource>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80006a0:	f000 f8ca 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006a4:	2320      	movs	r3, #32
 80006a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_TIM4_Init+0x90>)
 80006b2:	f001 fd73 	bl	800219c <HAL_TIMEx_MasterConfigSynchronization>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80006bc:	f000 f8bc 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000028 	.word	0x20000028
 80006cc:	40000800 	.word	0x40000800

080006d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_DMA_Init+0x58>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a13      	ldr	r2, [pc, #76]	; (8000728 <MX_DMA_Init+0x58>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6153      	str	r3, [r2, #20]
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_DMA_Init+0x58>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	200c      	movs	r0, #12
 80006f4:	f000 fb71 	bl	8000dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006f8:	200c      	movs	r0, #12
 80006fa:	f000 fb8a 	bl	8000e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	200f      	movs	r0, #15
 8000704:	f000 fb69 	bl	8000dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000708:	200f      	movs	r0, #15
 800070a:	f000 fb82 	bl	8000e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2011      	movs	r0, #17
 8000714:	f000 fb61 	bl	8000dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000718:	2011      	movs	r0, #17
 800071a:	f000 fb7a 	bl	8000e12 <HAL_NVIC_EnableIRQ>

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000740:	4b39      	ldr	r3, [pc, #228]	; (8000828 <MX_GPIO_Init+0xfc>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a38      	ldr	r2, [pc, #224]	; (8000828 <MX_GPIO_Init+0xfc>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b36      	ldr	r3, [pc, #216]	; (8000828 <MX_GPIO_Init+0xfc>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0310 	and.w	r3, r3, #16
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000758:	4b33      	ldr	r3, [pc, #204]	; (8000828 <MX_GPIO_Init+0xfc>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a32      	ldr	r2, [pc, #200]	; (8000828 <MX_GPIO_Init+0xfc>)
 800075e:	f043 0320 	orr.w	r3, r3, #32
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b30      	ldr	r3, [pc, #192]	; (8000828 <MX_GPIO_Init+0xfc>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0320 	and.w	r3, r3, #32
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <MX_GPIO_Init+0xfc>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a2c      	ldr	r2, [pc, #176]	; (8000828 <MX_GPIO_Init+0xfc>)
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b2a      	ldr	r3, [pc, #168]	; (8000828 <MX_GPIO_Init+0xfc>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	4b27      	ldr	r3, [pc, #156]	; (8000828 <MX_GPIO_Init+0xfc>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a26      	ldr	r2, [pc, #152]	; (8000828 <MX_GPIO_Init+0xfc>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b24      	ldr	r3, [pc, #144]	; (8000828 <MX_GPIO_Init+0xfc>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80007a6:	4821      	ldr	r0, [pc, #132]	; (800082c <MX_GPIO_Init+0x100>)
 80007a8:	f000 fea2 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007ac:	2200      	movs	r2, #0
 80007ae:	f649 71ff 	movw	r1, #40959	; 0x9fff
 80007b2:	481f      	ldr	r0, [pc, #124]	; (8000830 <MX_GPIO_Init+0x104>)
 80007b4:	f000 fe9c 	bl	80014f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80007b8:	2200      	movs	r2, #0
 80007ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007be:	481d      	ldr	r0, [pc, #116]	; (8000834 <MX_GPIO_Init+0x108>)
 80007c0:	f000 fe96 	bl	80014f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007c4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2302      	movs	r3, #2
 80007d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	4619      	mov	r1, r3
 80007dc:	4813      	ldr	r0, [pc, #76]	; (800082c <MX_GPIO_Init+0x100>)
 80007de:	f000 fd03 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007e2:	f649 73ff 	movw	r3, #40959	; 0x9fff
 80007e6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2302      	movs	r3, #2
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4619      	mov	r1, r3
 80007fa:	480d      	ldr	r0, [pc, #52]	; (8000830 <MX_GPIO_Init+0x104>)
 80007fc:	f000 fcf4 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000804:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2302      	movs	r3, #2
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	4619      	mov	r1, r3
 8000818:	4806      	ldr	r0, [pc, #24]	; (8000834 <MX_GPIO_Init+0x108>)
 800081a:	f000 fce5 	bl	80011e8 <HAL_GPIO_Init>

}
 800081e:	bf00      	nop
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000
 800082c:	40011000 	.word	0x40011000
 8000830:	40010800 	.word	0x40010800
 8000834:	40010c00 	.word	0x40010c00

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_MspInit+0x5c>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <HAL_MspInit+0x5c>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_MspInit+0x5c>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x5c>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_MspInit+0x5c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	61d3      	str	r3, [r2, #28]
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_MspInit+0x5c>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_MspInit+0x60>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <HAL_MspInit+0x60>)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010000 	.word	0x40010000

080008a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a57      	ldr	r2, [pc, #348]	; (8000a14 <HAL_TIM_Base_MspInit+0x16c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d134      	bne.n	8000924 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ba:	4b57      	ldr	r3, [pc, #348]	; (8000a18 <HAL_TIM_Base_MspInit+0x170>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a56      	ldr	r2, [pc, #344]	; (8000a18 <HAL_TIM_Base_MspInit+0x170>)
 80008c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008c4:	6193      	str	r3, [r2, #24]
 80008c6:	4b54      	ldr	r3, [pc, #336]	; (8000a18 <HAL_TIM_Base_MspInit+0x170>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel5;
 80008d2:	4b52      	ldr	r3, [pc, #328]	; (8000a1c <HAL_TIM_Base_MspInit+0x174>)
 80008d4:	4a52      	ldr	r2, [pc, #328]	; (8000a20 <HAL_TIM_Base_MspInit+0x178>)
 80008d6:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008d8:	4b50      	ldr	r3, [pc, #320]	; (8000a1c <HAL_TIM_Base_MspInit+0x174>)
 80008da:	2210      	movs	r2, #16
 80008dc:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80008de:	4b4f      	ldr	r3, [pc, #316]	; (8000a1c <HAL_TIM_Base_MspInit+0x174>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80008e4:	4b4d      	ldr	r3, [pc, #308]	; (8000a1c <HAL_TIM_Base_MspInit+0x174>)
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008ea:	4b4c      	ldr	r3, [pc, #304]	; (8000a1c <HAL_TIM_Base_MspInit+0x174>)
 80008ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f0:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008f2:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <HAL_TIM_Base_MspInit+0x174>)
 80008f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008f8:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80008fa:	4b48      	ldr	r3, [pc, #288]	; (8000a1c <HAL_TIM_Base_MspInit+0x174>)
 80008fc:	2220      	movs	r2, #32
 80008fe:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000900:	4b46      	ldr	r3, [pc, #280]	; (8000a1c <HAL_TIM_Base_MspInit+0x174>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000906:	4845      	ldr	r0, [pc, #276]	; (8000a1c <HAL_TIM_Base_MspInit+0x174>)
 8000908:	f000 fa9e 	bl	8000e48 <HAL_DMA_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000912:	f7ff ff91 	bl	8000838 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a40      	ldr	r2, [pc, #256]	; (8000a1c <HAL_TIM_Base_MspInit+0x174>)
 800091a:	621a      	str	r2, [r3, #32]
 800091c:	4a3f      	ldr	r2, [pc, #252]	; (8000a1c <HAL_TIM_Base_MspInit+0x174>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000922:	e072      	b.n	8000a0a <HAL_TIM_Base_MspInit+0x162>
  else if(htim_base->Instance==TIM2)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800092c:	d134      	bne.n	8000998 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800092e:	4b3a      	ldr	r3, [pc, #232]	; (8000a18 <HAL_TIM_Base_MspInit+0x170>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4a39      	ldr	r2, [pc, #228]	; (8000a18 <HAL_TIM_Base_MspInit+0x170>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	61d3      	str	r3, [r2, #28]
 800093a:	4b37      	ldr	r3, [pc, #220]	; (8000a18 <HAL_TIM_Base_MspInit+0x170>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_up.Instance = DMA1_Channel2;
 8000946:	4b37      	ldr	r3, [pc, #220]	; (8000a24 <HAL_TIM_Base_MspInit+0x17c>)
 8000948:	4a37      	ldr	r2, [pc, #220]	; (8000a28 <HAL_TIM_Base_MspInit+0x180>)
 800094a:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800094c:	4b35      	ldr	r3, [pc, #212]	; (8000a24 <HAL_TIM_Base_MspInit+0x17c>)
 800094e:	2210      	movs	r2, #16
 8000950:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000952:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <HAL_TIM_Base_MspInit+0x17c>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8000958:	4b32      	ldr	r3, [pc, #200]	; (8000a24 <HAL_TIM_Base_MspInit+0x17c>)
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800095e:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <HAL_TIM_Base_MspInit+0x17c>)
 8000960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000964:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000966:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <HAL_TIM_Base_MspInit+0x17c>)
 8000968:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800096c:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <HAL_TIM_Base_MspInit+0x17c>)
 8000970:	2220      	movs	r2, #32
 8000972:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8000974:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <HAL_TIM_Base_MspInit+0x17c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 800097a:	482a      	ldr	r0, [pc, #168]	; (8000a24 <HAL_TIM_Base_MspInit+0x17c>)
 800097c:	f000 fa64 	bl	8000e48 <HAL_DMA_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_TIM_Base_MspInit+0xe2>
      Error_Handler();
 8000986:	f7ff ff57 	bl	8000838 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a25      	ldr	r2, [pc, #148]	; (8000a24 <HAL_TIM_Base_MspInit+0x17c>)
 800098e:	621a      	str	r2, [r3, #32]
 8000990:	4a24      	ldr	r2, [pc, #144]	; (8000a24 <HAL_TIM_Base_MspInit+0x17c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000996:	e038      	b.n	8000a0a <HAL_TIM_Base_MspInit+0x162>
  else if(htim_base->Instance==TIM4)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <HAL_TIM_Base_MspInit+0x184>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d133      	bne.n	8000a0a <HAL_TIM_Base_MspInit+0x162>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <HAL_TIM_Base_MspInit+0x170>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <HAL_TIM_Base_MspInit+0x170>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <HAL_TIM_Base_MspInit+0x170>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_up.Instance = DMA1_Channel7;
 80009ba:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <HAL_TIM_Base_MspInit+0x188>)
 80009bc:	4a1d      	ldr	r2, [pc, #116]	; (8000a34 <HAL_TIM_Base_MspInit+0x18c>)
 80009be:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <HAL_TIM_Base_MspInit+0x188>)
 80009c2:	2210      	movs	r2, #16
 80009c4:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <HAL_TIM_Base_MspInit+0x188>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_TIM_Base_MspInit+0x188>)
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <HAL_TIM_Base_MspInit+0x188>)
 80009d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d8:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_TIM_Base_MspInit+0x188>)
 80009dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009e0:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <HAL_TIM_Base_MspInit+0x188>)
 80009e4:	2220      	movs	r2, #32
 80009e6:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_TIM_Base_MspInit+0x188>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 80009ee:	4810      	ldr	r0, [pc, #64]	; (8000a30 <HAL_TIM_Base_MspInit+0x188>)
 80009f0:	f000 fa2a 	bl	8000e48 <HAL_DMA_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_TIM_Base_MspInit+0x156>
      Error_Handler();
 80009fa:	f7ff ff1d 	bl	8000838 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <HAL_TIM_Base_MspInit+0x188>)
 8000a02:	621a      	str	r2, [r3, #32]
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_TIM_Base_MspInit+0x188>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40012c00 	.word	0x40012c00
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	200005ac 	.word	0x200005ac
 8000a20:	40020058 	.word	0x40020058
 8000a24:	20000070 	.word	0x20000070
 8000a28:	4002001c 	.word	0x4002001c
 8000a2c:	40000800 	.word	0x40000800
 8000a30:	20000638 	.word	0x20000638
 8000a34:	40020080 	.word	0x40020080

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <HardFault_Handler+0x4>

08000a4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <MemManage_Handler+0x4>

08000a50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <BusFault_Handler+0x4>

08000a56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <UsageFault_Handler+0x4>

08000a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a84:	f000 f892 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <DMA1_Channel2_IRQHandler+0x10>)
 8000a92:	f000 fa75 	bl	8000f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000070 	.word	0x20000070

08000aa0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <DMA1_Channel5_IRQHandler+0x10>)
 8000aa6:	f000 fa6b 	bl	8000f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200005ac 	.word	0x200005ac

08000ab4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <DMA1_Channel7_IRQHandler+0x10>)
 8000aba:	f000 fa61 	bl	8000f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000638 	.word	0x20000638

08000ac8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad6:	490d      	ldr	r1, [pc, #52]	; (8000b0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aec:	4c0a      	ldr	r4, [pc, #40]	; (8000b18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000afa:	f7ff ffe5 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afe:	f001 fbab 	bl	8002258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b02:	f7ff fb8d 	bl	8000220 <main>
  bx lr
 8000b06:	4770      	bx	lr
  ldr r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b10:	080022f0 	.word	0x080022f0
  ldr r2, =_sbss
 8000b14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b18:	20000680 	.word	0x20000680

08000b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC1_2_IRQHandler>
	...

08000b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_Init+0x28>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_Init+0x28>)
 8000b2a:	f043 0310 	orr.w	r3, r3, #16
 8000b2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f947 	bl	8000dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f808 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3c:	f7ff fe82 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40022000 	.word	0x40022000

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x54>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f95f 	bl	8000e2e <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00e      	b.n	8000b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d80a      	bhi.n	8000b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f000 f927 	bl	8000dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_InitTick+0x5c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_IncTick+0x1c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a03      	ldr	r2, [pc, #12]	; (8000bcc <HAL_IncTick+0x20>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	2000067c 	.word	0x2000067c

08000bd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b02      	ldr	r3, [pc, #8]	; (8000be0 <HAL_GetTick+0x10>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	2000067c 	.word	0x2000067c

08000be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bec:	f7ff fff0 	bl	8000bd0 <HAL_GetTick>
 8000bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bfc:	d005      	beq.n	8000c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_Delay+0x44>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	461a      	mov	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4413      	add	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c0a:	bf00      	nop
 8000c0c:	f7ff ffe0 	bl	8000bd0 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d8f7      	bhi.n	8000c0c <HAL_Delay+0x28>
  {
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008

08000c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	60d3      	str	r3, [r2, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <__NVIC_GetPriorityGrouping+0x18>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	f003 0307 	and.w	r3, r3, #7
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	db0b      	blt.n	8000cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f003 021f 	and.w	r2, r3, #31
 8000ca8:	4906      	ldr	r1, [pc, #24]	; (8000cc4 <__NVIC_EnableIRQ+0x34>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	095b      	lsrs	r3, r3, #5
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d90:	d301      	bcc.n	8000d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00f      	b.n	8000db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <SysTick_Config+0x40>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9e:	210f      	movs	r1, #15
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f7ff ff90 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SysTick_Config+0x40>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <SysTick_Config+0x40>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	e000e010 	.word	0xe000e010

08000dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff2d 	bl	8000c2c <__NVIC_SetPriorityGrouping>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dec:	f7ff ff42 	bl	8000c74 <__NVIC_GetPriorityGrouping>
 8000df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	6978      	ldr	r0, [r7, #20]
 8000df8:	f7ff ff90 	bl	8000d1c <NVIC_EncodePriority>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff5f 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff35 	bl	8000c90 <__NVIC_EnableIRQ>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffa2 	bl	8000d80 <SysTick_Config>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e043      	b.n	8000ee6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <HAL_DMA_Init+0xa8>)
 8000e66:	4413      	add	r3, r2
 8000e68:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <HAL_DMA_Init+0xac>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	009a      	lsls	r2, r3, #2
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a1f      	ldr	r2, [pc, #124]	; (8000ef8 <HAL_DMA_Init+0xb0>)
 8000e7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2202      	movs	r2, #2
 8000e80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	bffdfff8 	.word	0xbffdfff8
 8000ef4:	cccccccd 	.word	0xcccccccd
 8000ef8:	40020000 	.word	0x40020000

08000efc <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d101      	bne.n	8000f1c <HAL_DMA_Start+0x20>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e02d      	b.n	8000f78 <HAL_DMA_Start+0x7c>
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d11d      	bne.n	8000f6a <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2202      	movs	r2, #2
 8000f32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0201 	bic.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f000 f91a 	bl	800118c <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 0201 	orr.w	r2, r2, #1
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e005      	b.n	8000f76 <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 8000f72:	2302      	movs	r3, #2
 8000f74:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d04f      	beq.n	8001048 <HAL_DMA_IRQHandler+0xc8>
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d04a      	beq.n	8001048 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0320 	and.w	r3, r3, #32
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d107      	bne.n	8000fd0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 0204 	bic.w	r2, r2, #4
 8000fce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a66      	ldr	r2, [pc, #408]	; (8001170 <HAL_DMA_IRQHandler+0x1f0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d029      	beq.n	800102e <HAL_DMA_IRQHandler+0xae>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a65      	ldr	r2, [pc, #404]	; (8001174 <HAL_DMA_IRQHandler+0x1f4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d022      	beq.n	800102a <HAL_DMA_IRQHandler+0xaa>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a63      	ldr	r2, [pc, #396]	; (8001178 <HAL_DMA_IRQHandler+0x1f8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d01a      	beq.n	8001024 <HAL_DMA_IRQHandler+0xa4>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a62      	ldr	r2, [pc, #392]	; (800117c <HAL_DMA_IRQHandler+0x1fc>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d012      	beq.n	800101e <HAL_DMA_IRQHandler+0x9e>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a60      	ldr	r2, [pc, #384]	; (8001180 <HAL_DMA_IRQHandler+0x200>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d00a      	beq.n	8001018 <HAL_DMA_IRQHandler+0x98>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a5f      	ldr	r2, [pc, #380]	; (8001184 <HAL_DMA_IRQHandler+0x204>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d102      	bne.n	8001012 <HAL_DMA_IRQHandler+0x92>
 800100c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001010:	e00e      	b.n	8001030 <HAL_DMA_IRQHandler+0xb0>
 8001012:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001016:	e00b      	b.n	8001030 <HAL_DMA_IRQHandler+0xb0>
 8001018:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800101c:	e008      	b.n	8001030 <HAL_DMA_IRQHandler+0xb0>
 800101e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001022:	e005      	b.n	8001030 <HAL_DMA_IRQHandler+0xb0>
 8001024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001028:	e002      	b.n	8001030 <HAL_DMA_IRQHandler+0xb0>
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	e000      	b.n	8001030 <HAL_DMA_IRQHandler+0xb0>
 800102e:	2304      	movs	r3, #4
 8001030:	4a55      	ldr	r2, [pc, #340]	; (8001188 <HAL_DMA_IRQHandler+0x208>)
 8001032:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 8094 	beq.w	8001166 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001046:	e08e      	b.n	8001166 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	2202      	movs	r2, #2
 800104e:	409a      	lsls	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4013      	ands	r3, r2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d056      	beq.n	8001106 <HAL_DMA_IRQHandler+0x186>
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d051      	beq.n	8001106 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10b      	bne.n	8001088 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 020a 	bic.w	r2, r2, #10
 800107e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a38      	ldr	r2, [pc, #224]	; (8001170 <HAL_DMA_IRQHandler+0x1f0>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d029      	beq.n	80010e6 <HAL_DMA_IRQHandler+0x166>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a37      	ldr	r2, [pc, #220]	; (8001174 <HAL_DMA_IRQHandler+0x1f4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d022      	beq.n	80010e2 <HAL_DMA_IRQHandler+0x162>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a35      	ldr	r2, [pc, #212]	; (8001178 <HAL_DMA_IRQHandler+0x1f8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d01a      	beq.n	80010dc <HAL_DMA_IRQHandler+0x15c>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a34      	ldr	r2, [pc, #208]	; (800117c <HAL_DMA_IRQHandler+0x1fc>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d012      	beq.n	80010d6 <HAL_DMA_IRQHandler+0x156>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a32      	ldr	r2, [pc, #200]	; (8001180 <HAL_DMA_IRQHandler+0x200>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00a      	beq.n	80010d0 <HAL_DMA_IRQHandler+0x150>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a31      	ldr	r2, [pc, #196]	; (8001184 <HAL_DMA_IRQHandler+0x204>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d102      	bne.n	80010ca <HAL_DMA_IRQHandler+0x14a>
 80010c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010c8:	e00e      	b.n	80010e8 <HAL_DMA_IRQHandler+0x168>
 80010ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ce:	e00b      	b.n	80010e8 <HAL_DMA_IRQHandler+0x168>
 80010d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d4:	e008      	b.n	80010e8 <HAL_DMA_IRQHandler+0x168>
 80010d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010da:	e005      	b.n	80010e8 <HAL_DMA_IRQHandler+0x168>
 80010dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e0:	e002      	b.n	80010e8 <HAL_DMA_IRQHandler+0x168>
 80010e2:	2320      	movs	r3, #32
 80010e4:	e000      	b.n	80010e8 <HAL_DMA_IRQHandler+0x168>
 80010e6:	2302      	movs	r3, #2
 80010e8:	4a27      	ldr	r2, [pc, #156]	; (8001188 <HAL_DMA_IRQHandler+0x208>)
 80010ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d034      	beq.n	8001166 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001104:	e02f      	b.n	8001166 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	2208      	movs	r2, #8
 800110c:	409a      	lsls	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4013      	ands	r3, r2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d028      	beq.n	8001168 <HAL_DMA_IRQHandler+0x1e8>
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b00      	cmp	r3, #0
 800111e:	d023      	beq.n	8001168 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 020e 	bic.w	r2, r2, #14
 800112e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001138:	2101      	movs	r1, #1
 800113a:	fa01 f202 	lsl.w	r2, r1, r2
 800113e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	2b00      	cmp	r3, #0
 800115c:	d004      	beq.n	8001168 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	4798      	blx	r3
    }
  }
  return;
 8001166:	bf00      	nop
 8001168:	bf00      	nop
}
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40020008 	.word	0x40020008
 8001174:	4002001c 	.word	0x4002001c
 8001178:	40020030 	.word	0x40020030
 800117c:	40020044 	.word	0x40020044
 8001180:	40020058 	.word	0x40020058
 8001184:	4002006c 	.word	0x4002006c
 8001188:	40020000 	.word	0x40020000

0800118c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a2:	2101      	movs	r1, #1
 80011a4:	fa01 f202 	lsl.w	r2, r1, r2
 80011a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b10      	cmp	r3, #16
 80011b8:	d108      	bne.n	80011cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011ca:	e007      	b.n	80011dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68ba      	ldr	r2, [r7, #8]
 80011d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	60da      	str	r2, [r3, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b08b      	sub	sp, #44	; 0x2c
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fa:	e169      	b.n	80014d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011fc:	2201      	movs	r2, #1
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	429a      	cmp	r2, r3
 8001216:	f040 8158 	bne.w	80014ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a9a      	ldr	r2, [pc, #616]	; (8001488 <HAL_GPIO_Init+0x2a0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d05e      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001224:	4a98      	ldr	r2, [pc, #608]	; (8001488 <HAL_GPIO_Init+0x2a0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d875      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800122a:	4a98      	ldr	r2, [pc, #608]	; (800148c <HAL_GPIO_Init+0x2a4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d058      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001230:	4a96      	ldr	r2, [pc, #600]	; (800148c <HAL_GPIO_Init+0x2a4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d86f      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001236:	4a96      	ldr	r2, [pc, #600]	; (8001490 <HAL_GPIO_Init+0x2a8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d052      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 800123c:	4a94      	ldr	r2, [pc, #592]	; (8001490 <HAL_GPIO_Init+0x2a8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d869      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001242:	4a94      	ldr	r2, [pc, #592]	; (8001494 <HAL_GPIO_Init+0x2ac>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d04c      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001248:	4a92      	ldr	r2, [pc, #584]	; (8001494 <HAL_GPIO_Init+0x2ac>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d863      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800124e:	4a92      	ldr	r2, [pc, #584]	; (8001498 <HAL_GPIO_Init+0x2b0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d046      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
 8001254:	4a90      	ldr	r2, [pc, #576]	; (8001498 <HAL_GPIO_Init+0x2b0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d85d      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 800125a:	2b12      	cmp	r3, #18
 800125c:	d82a      	bhi.n	80012b4 <HAL_GPIO_Init+0xcc>
 800125e:	2b12      	cmp	r3, #18
 8001260:	d859      	bhi.n	8001316 <HAL_GPIO_Init+0x12e>
 8001262:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <HAL_GPIO_Init+0x80>)
 8001264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001268:	080012e3 	.word	0x080012e3
 800126c:	080012bd 	.word	0x080012bd
 8001270:	080012cf 	.word	0x080012cf
 8001274:	08001311 	.word	0x08001311
 8001278:	08001317 	.word	0x08001317
 800127c:	08001317 	.word	0x08001317
 8001280:	08001317 	.word	0x08001317
 8001284:	08001317 	.word	0x08001317
 8001288:	08001317 	.word	0x08001317
 800128c:	08001317 	.word	0x08001317
 8001290:	08001317 	.word	0x08001317
 8001294:	08001317 	.word	0x08001317
 8001298:	08001317 	.word	0x08001317
 800129c:	08001317 	.word	0x08001317
 80012a0:	08001317 	.word	0x08001317
 80012a4:	08001317 	.word	0x08001317
 80012a8:	08001317 	.word	0x08001317
 80012ac:	080012c5 	.word	0x080012c5
 80012b0:	080012d9 	.word	0x080012d9
 80012b4:	4a79      	ldr	r2, [pc, #484]	; (800149c <HAL_GPIO_Init+0x2b4>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ba:	e02c      	b.n	8001316 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e029      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	3304      	adds	r3, #4
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e024      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	3308      	adds	r3, #8
 80012d4:	623b      	str	r3, [r7, #32]
          break;
 80012d6:	e01f      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	330c      	adds	r3, #12
 80012de:	623b      	str	r3, [r7, #32]
          break;
 80012e0:	e01a      	b.n	8001318 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ea:	2304      	movs	r3, #4
 80012ec:	623b      	str	r3, [r7, #32]
          break;
 80012ee:	e013      	b.n	8001318 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f8:	2308      	movs	r3, #8
 80012fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	611a      	str	r2, [r3, #16]
          break;
 8001302:	e009      	b.n	8001318 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001304:	2308      	movs	r3, #8
 8001306:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	615a      	str	r2, [r3, #20]
          break;
 800130e:	e003      	b.n	8001318 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
          break;
 8001314:	e000      	b.n	8001318 <HAL_GPIO_Init+0x130>
          break;
 8001316:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2bff      	cmp	r3, #255	; 0xff
 800131c:	d801      	bhi.n	8001322 <HAL_GPIO_Init+0x13a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	e001      	b.n	8001326 <HAL_GPIO_Init+0x13e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3304      	adds	r3, #4
 8001326:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2bff      	cmp	r3, #255	; 0xff
 800132c:	d802      	bhi.n	8001334 <HAL_GPIO_Init+0x14c>
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	e002      	b.n	800133a <HAL_GPIO_Init+0x152>
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	3b08      	subs	r3, #8
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	210f      	movs	r1, #15
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	401a      	ands	r2, r3
 800134c:	6a39      	ldr	r1, [r7, #32]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	431a      	orrs	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 80b1 	beq.w	80014ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001368:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <HAL_GPIO_Init+0x2b8>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a4c      	ldr	r2, [pc, #304]	; (80014a0 <HAL_GPIO_Init+0x2b8>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <HAL_GPIO_Init+0x2b8>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001380:	4a48      	ldr	r2, [pc, #288]	; (80014a4 <HAL_GPIO_Init+0x2bc>)
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	4013      	ands	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a40      	ldr	r2, [pc, #256]	; (80014a8 <HAL_GPIO_Init+0x2c0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d013      	beq.n	80013d4 <HAL_GPIO_Init+0x1ec>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a3f      	ldr	r2, [pc, #252]	; (80014ac <HAL_GPIO_Init+0x2c4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d00d      	beq.n	80013d0 <HAL_GPIO_Init+0x1e8>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <HAL_GPIO_Init+0x2c8>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d007      	beq.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <HAL_GPIO_Init+0x2cc>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_GPIO_Init+0x1e0>
 80013c4:	2303      	movs	r3, #3
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013c8:	2304      	movs	r3, #4
 80013ca:	e004      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e002      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d4:	2300      	movs	r3, #0
 80013d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d8:	f002 0203 	and.w	r2, r2, #3
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	4093      	lsls	r3, r2
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013e6:	492f      	ldr	r1, [pc, #188]	; (80014a4 <HAL_GPIO_Init+0x2bc>)
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	492c      	ldr	r1, [pc, #176]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	43db      	mvns	r3, r3
 8001416:	4928      	ldr	r1, [pc, #160]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001418:	4013      	ands	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4922      	ldr	r1, [pc, #136]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	43db      	mvns	r3, r3
 800143e:	491e      	ldr	r1, [pc, #120]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001440:	4013      	ands	r3, r2
 8001442:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	4918      	ldr	r1, [pc, #96]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	608b      	str	r3, [r1, #8]
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	43db      	mvns	r3, r3
 8001466:	4914      	ldr	r1, [pc, #80]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 8001468:	4013      	ands	r3, r2
 800146a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d021      	beq.n	80014bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	490e      	ldr	r1, [pc, #56]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	60cb      	str	r3, [r1, #12]
 8001484:	e021      	b.n	80014ca <HAL_GPIO_Init+0x2e2>
 8001486:	bf00      	nop
 8001488:	10320000 	.word	0x10320000
 800148c:	10310000 	.word	0x10310000
 8001490:	10220000 	.word	0x10220000
 8001494:	10210000 	.word	0x10210000
 8001498:	10120000 	.word	0x10120000
 800149c:	10110000 	.word	0x10110000
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010000 	.word	0x40010000
 80014a8:	40010800 	.word	0x40010800
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	40011000 	.word	0x40011000
 80014b4:	40011400 	.word	0x40011400
 80014b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_GPIO_Init+0x304>)
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	4909      	ldr	r1, [pc, #36]	; (80014ec <HAL_GPIO_Init+0x304>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	3301      	adds	r3, #1
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	fa22 f303 	lsr.w	r3, r2, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f47f ae8e 	bne.w	80011fc <HAL_GPIO_Init+0x14>
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	372c      	adds	r7, #44	; 0x2c
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	40010400 	.word	0x40010400

080014f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800150c:	e003      	b.n	8001516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	041a      	lsls	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	611a      	str	r2, [r3, #16]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e26c      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 8087 	beq.w	800164e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001540:	4b92      	ldr	r3, [pc, #584]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	2b04      	cmp	r3, #4
 800154a:	d00c      	beq.n	8001566 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800154c:	4b8f      	ldr	r3, [pc, #572]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b08      	cmp	r3, #8
 8001556:	d112      	bne.n	800157e <HAL_RCC_OscConfig+0x5e>
 8001558:	4b8c      	ldr	r3, [pc, #560]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001564:	d10b      	bne.n	800157e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001566:	4b89      	ldr	r3, [pc, #548]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d06c      	beq.n	800164c <HAL_RCC_OscConfig+0x12c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d168      	bne.n	800164c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e246      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x76>
 8001588:	4b80      	ldr	r3, [pc, #512]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a7f      	ldr	r2, [pc, #508]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 800158e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	e02e      	b.n	80015f4 <HAL_RCC_OscConfig+0xd4>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x98>
 800159e:	4b7b      	ldr	r3, [pc, #492]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a7a      	ldr	r2, [pc, #488]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b78      	ldr	r3, [pc, #480]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a77      	ldr	r2, [pc, #476]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e01d      	b.n	80015f4 <HAL_RCC_OscConfig+0xd4>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0xbc>
 80015c2:	4b72      	ldr	r3, [pc, #456]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a71      	ldr	r2, [pc, #452]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	4b6f      	ldr	r3, [pc, #444]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a6e      	ldr	r2, [pc, #440]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e00b      	b.n	80015f4 <HAL_RCC_OscConfig+0xd4>
 80015dc:	4b6b      	ldr	r3, [pc, #428]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a6a      	ldr	r2, [pc, #424]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b68      	ldr	r3, [pc, #416]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a67      	ldr	r2, [pc, #412]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fae8 	bl	8000bd0 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fae4 	bl	8000bd0 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	; 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e1fa      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b5d      	ldr	r3, [pc, #372]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0xe4>
 8001622:	e014      	b.n	800164e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fad4 	bl	8000bd0 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fad0 	bl	8000bd0 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	; 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e1e6      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163e:	4b53      	ldr	r3, [pc, #332]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x10c>
 800164a:	e000      	b.n	800164e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d063      	beq.n	8001722 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800165a:	4b4c      	ldr	r3, [pc, #304]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00b      	beq.n	800167e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001666:	4b49      	ldr	r3, [pc, #292]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b08      	cmp	r3, #8
 8001670:	d11c      	bne.n	80016ac <HAL_RCC_OscConfig+0x18c>
 8001672:	4b46      	ldr	r3, [pc, #280]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d116      	bne.n	80016ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	4b43      	ldr	r3, [pc, #268]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d005      	beq.n	8001696 <HAL_RCC_OscConfig+0x176>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d001      	beq.n	8001696 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e1ba      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001696:	4b3d      	ldr	r3, [pc, #244]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4939      	ldr	r1, [pc, #228]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016aa:	e03a      	b.n	8001722 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b4:	4b36      	ldr	r3, [pc, #216]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fa89 	bl	8000bd0 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c2:	f7ff fa85 	bl	8000bd0 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e19b      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e0:	4b2a      	ldr	r3, [pc, #168]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4927      	ldr	r1, [pc, #156]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]
 80016f4:	e015      	b.n	8001722 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fa68 	bl	8000bd0 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001704:	f7ff fa64 	bl	8000bd0 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e17a      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d03a      	beq.n	80017a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d019      	beq.n	800176a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_RCC_OscConfig+0x274>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173c:	f7ff fa48 	bl	8000bd0 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001744:	f7ff fa44 	bl	8000bd0 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e15a      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001762:	2001      	movs	r0, #1
 8001764:	f000 faa6 	bl	8001cb4 <RCC_Delay>
 8001768:	e01c      	b.n	80017a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_RCC_OscConfig+0x274>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001770:	f7ff fa2e 	bl	8000bd0 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001776:	e00f      	b.n	8001798 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001778:	f7ff fa2a 	bl	8000bd0 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d908      	bls.n	8001798 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e140      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	42420000 	.word	0x42420000
 8001794:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001798:	4b9e      	ldr	r3, [pc, #632]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1e9      	bne.n	8001778 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80a6 	beq.w	80018fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b6:	4b97      	ldr	r3, [pc, #604]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10d      	bne.n	80017de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b94      	ldr	r3, [pc, #592]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a93      	ldr	r2, [pc, #588]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017cc:	61d3      	str	r3, [r2, #28]
 80017ce:	4b91      	ldr	r3, [pc, #580]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017da:	2301      	movs	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017de:	4b8e      	ldr	r3, [pc, #568]	; (8001a18 <HAL_RCC_OscConfig+0x4f8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d118      	bne.n	800181c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ea:	4b8b      	ldr	r3, [pc, #556]	; (8001a18 <HAL_RCC_OscConfig+0x4f8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a8a      	ldr	r2, [pc, #552]	; (8001a18 <HAL_RCC_OscConfig+0x4f8>)
 80017f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017f6:	f7ff f9eb 	bl	8000bd0 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fe:	f7ff f9e7 	bl	8000bd0 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b64      	cmp	r3, #100	; 0x64
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e0fd      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001810:	4b81      	ldr	r3, [pc, #516]	; (8001a18 <HAL_RCC_OscConfig+0x4f8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x312>
 8001824:	4b7b      	ldr	r3, [pc, #492]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4a7a      	ldr	r2, [pc, #488]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6213      	str	r3, [r2, #32]
 8001830:	e02d      	b.n	800188e <HAL_RCC_OscConfig+0x36e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x334>
 800183a:	4b76      	ldr	r3, [pc, #472]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4a75      	ldr	r2, [pc, #468]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	6213      	str	r3, [r2, #32]
 8001846:	4b73      	ldr	r3, [pc, #460]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4a72      	ldr	r2, [pc, #456]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 800184c:	f023 0304 	bic.w	r3, r3, #4
 8001850:	6213      	str	r3, [r2, #32]
 8001852:	e01c      	b.n	800188e <HAL_RCC_OscConfig+0x36e>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b05      	cmp	r3, #5
 800185a:	d10c      	bne.n	8001876 <HAL_RCC_OscConfig+0x356>
 800185c:	4b6d      	ldr	r3, [pc, #436]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4a6c      	ldr	r2, [pc, #432]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	6213      	str	r3, [r2, #32]
 8001868:	4b6a      	ldr	r3, [pc, #424]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4a69      	ldr	r2, [pc, #420]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6213      	str	r3, [r2, #32]
 8001874:	e00b      	b.n	800188e <HAL_RCC_OscConfig+0x36e>
 8001876:	4b67      	ldr	r3, [pc, #412]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	4a66      	ldr	r2, [pc, #408]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6213      	str	r3, [r2, #32]
 8001882:	4b64      	ldr	r3, [pc, #400]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	4a63      	ldr	r2, [pc, #396]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	f023 0304 	bic.w	r3, r3, #4
 800188c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d015      	beq.n	80018c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001896:	f7ff f99b 	bl	8000bd0 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189e:	f7ff f997 	bl	8000bd0 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0ab      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b4:	4b57      	ldr	r3, [pc, #348]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0ee      	beq.n	800189e <HAL_RCC_OscConfig+0x37e>
 80018c0:	e014      	b.n	80018ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c2:	f7ff f985 	bl	8000bd0 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff f981 	bl	8000bd0 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e095      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e0:	4b4c      	ldr	r3, [pc, #304]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1ee      	bne.n	80018ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d105      	bne.n	80018fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f2:	4b48      	ldr	r3, [pc, #288]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a47      	ldr	r2, [pc, #284]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 8081 	beq.w	8001a0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001908:	4b42      	ldr	r3, [pc, #264]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d061      	beq.n	80019d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d146      	bne.n	80019aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191c:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <HAL_RCC_OscConfig+0x4fc>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff f955 	bl	8000bd0 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff f951 	bl	8000bd0 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e067      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193c:	4b35      	ldr	r3, [pc, #212]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f0      	bne.n	800192a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001950:	d108      	bne.n	8001964 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001952:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	492d      	ldr	r1, [pc, #180]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001964:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a19      	ldr	r1, [r3, #32]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	430b      	orrs	r3, r1
 8001976:	4927      	ldr	r1, [pc, #156]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_RCC_OscConfig+0x4fc>)
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001982:	f7ff f925 	bl	8000bd0 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198a:	f7ff f921 	bl	8000bd0 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e037      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800199c:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x46a>
 80019a8:	e02f      	b.n	8001a0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <HAL_RCC_OscConfig+0x4fc>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff f90e 	bl	8000bd0 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff f90a 	bl	8000bd0 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e020      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x498>
 80019d6:	e018      	b.n	8001a0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e013      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_OscConfig+0x4f4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40007000 	.word	0x40007000
 8001a1c:	42420060 	.word	0x42420060

08001a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0d0      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a34:	4b6a      	ldr	r3, [pc, #424]	; (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d910      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b67      	ldr	r3, [pc, #412]	; (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 0207 	bic.w	r2, r3, #7
 8001a4a:	4965      	ldr	r1, [pc, #404]	; (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b63      	ldr	r3, [pc, #396]	; (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0b8      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d020      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a7c:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a58      	ldr	r2, [pc, #352]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a94:	4b53      	ldr	r3, [pc, #332]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4a52      	ldr	r2, [pc, #328]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b50      	ldr	r3, [pc, #320]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	494d      	ldr	r1, [pc, #308]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d040      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d115      	bne.n	8001afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e07f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ade:	4b41      	ldr	r3, [pc, #260]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d109      	bne.n	8001afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e073      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aee:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e06b      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afe:	4b39      	ldr	r3, [pc, #228]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f023 0203 	bic.w	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4936      	ldr	r1, [pc, #216]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b10:	f7ff f85e 	bl	8000bd0 <HAL_GetTick>
 8001b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	e00a      	b.n	8001b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b18:	f7ff f85a 	bl	8000bd0 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e053      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 020c 	and.w	r2, r3, #12
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d1eb      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b40:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d210      	bcs.n	8001b70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 0207 	bic.w	r2, r3, #7
 8001b56:	4922      	ldr	r1, [pc, #136]	; (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e032      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4916      	ldr	r1, [pc, #88]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	490e      	ldr	r1, [pc, #56]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bae:	f000 f821 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	490a      	ldr	r1, [pc, #40]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc0:	5ccb      	ldrb	r3, [r1, r3]
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	4a09      	ldr	r2, [pc, #36]	; (8001bec <HAL_RCC_ClockConfig+0x1cc>)
 8001bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_ClockConfig+0x1d0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe ffbc 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40022000 	.word	0x40022000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	080022d8 	.word	0x080022d8
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf4:	b490      	push	{r4, r7}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bfc:	1d3c      	adds	r4, r7, #4
 8001bfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c04:	f240 2301 	movw	r3, #513	; 0x201
 8001c08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d002      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x40>
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d003      	beq.n	8001c3a <HAL_RCC_GetSysClockFreq+0x46>
 8001c32:	e02d      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c36:	623b      	str	r3, [r7, #32]
      break;
 8001c38:	e02d      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	0c9b      	lsrs	r3, r3, #18
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c46:	4413      	add	r3, r2
 8001c48:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c4c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	0c5b      	lsrs	r3, r3, #17
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c66:	4413      	add	r3, r2
 8001c68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c72:	fb02 f203 	mul.w	r2, r2, r3
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7e:	e004      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c84:	fb02 f303 	mul.w	r3, r2, r3
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	623b      	str	r3, [r7, #32]
      break;
 8001c8e:	e002      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c92:	623b      	str	r3, [r7, #32]
      break;
 8001c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c96:	6a3b      	ldr	r3, [r7, #32]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc90      	pop	{r4, r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	080022c8 	.word	0x080022c8
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	007a1200 	.word	0x007a1200
 8001cb0:	003d0900 	.word	0x003d0900

08001cb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <RCC_Delay+0x34>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <RCC_Delay+0x38>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	0a5b      	lsrs	r3, r3, #9
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	fb02 f303 	mul.w	r3, r2, r3
 8001cce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cd0:	bf00      	nop
  }
  while (Delay --);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1e5a      	subs	r2, r3, #1
 8001cd6:	60fa      	str	r2, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f9      	bne.n	8001cd0 <RCC_Delay+0x1c>
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	10624dd3 	.word	0x10624dd3

08001cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e041      	b.n	8001d86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7fe fdc6 	bl	80008a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f000 f93c 	bl	8001fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d001      	beq.n	8001da8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e032      	b.n	8001e0e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <HAL_TIM_Base_Start+0x88>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00e      	beq.n	8001dd8 <HAL_TIM_Base_Start+0x48>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc2:	d009      	beq.n	8001dd8 <HAL_TIM_Base_Start+0x48>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_TIM_Base_Start+0x8c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_TIM_Base_Start+0x48>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <HAL_TIM_Base_Start+0x90>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d111      	bne.n	8001dfc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d010      	beq.n	8001e0c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfa:	e007      	b.n	8001e0c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	40012c00 	.word	0x40012c00
 8001e1c:	40000400 	.word	0x40000400
 8001e20:	40000800 	.word	0x40000800

08001e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_TIM_ConfigClockSource+0x18>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e0b3      	b.n	8001fa4 <HAL_TIM_ConfigClockSource+0x180>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e74:	d03e      	beq.n	8001ef4 <HAL_TIM_ConfigClockSource+0xd0>
 8001e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e7a:	f200 8087 	bhi.w	8001f8c <HAL_TIM_ConfigClockSource+0x168>
 8001e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e82:	f000 8085 	beq.w	8001f90 <HAL_TIM_ConfigClockSource+0x16c>
 8001e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8a:	d87f      	bhi.n	8001f8c <HAL_TIM_ConfigClockSource+0x168>
 8001e8c:	2b70      	cmp	r3, #112	; 0x70
 8001e8e:	d01a      	beq.n	8001ec6 <HAL_TIM_ConfigClockSource+0xa2>
 8001e90:	2b70      	cmp	r3, #112	; 0x70
 8001e92:	d87b      	bhi.n	8001f8c <HAL_TIM_ConfigClockSource+0x168>
 8001e94:	2b60      	cmp	r3, #96	; 0x60
 8001e96:	d050      	beq.n	8001f3a <HAL_TIM_ConfigClockSource+0x116>
 8001e98:	2b60      	cmp	r3, #96	; 0x60
 8001e9a:	d877      	bhi.n	8001f8c <HAL_TIM_ConfigClockSource+0x168>
 8001e9c:	2b50      	cmp	r3, #80	; 0x50
 8001e9e:	d03c      	beq.n	8001f1a <HAL_TIM_ConfigClockSource+0xf6>
 8001ea0:	2b50      	cmp	r3, #80	; 0x50
 8001ea2:	d873      	bhi.n	8001f8c <HAL_TIM_ConfigClockSource+0x168>
 8001ea4:	2b40      	cmp	r3, #64	; 0x40
 8001ea6:	d058      	beq.n	8001f5a <HAL_TIM_ConfigClockSource+0x136>
 8001ea8:	2b40      	cmp	r3, #64	; 0x40
 8001eaa:	d86f      	bhi.n	8001f8c <HAL_TIM_ConfigClockSource+0x168>
 8001eac:	2b30      	cmp	r3, #48	; 0x30
 8001eae:	d064      	beq.n	8001f7a <HAL_TIM_ConfigClockSource+0x156>
 8001eb0:	2b30      	cmp	r3, #48	; 0x30
 8001eb2:	d86b      	bhi.n	8001f8c <HAL_TIM_ConfigClockSource+0x168>
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d060      	beq.n	8001f7a <HAL_TIM_ConfigClockSource+0x156>
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d867      	bhi.n	8001f8c <HAL_TIM_ConfigClockSource+0x168>
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d05c      	beq.n	8001f7a <HAL_TIM_ConfigClockSource+0x156>
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d05a      	beq.n	8001f7a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001ec4:	e062      	b.n	8001f8c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6899      	ldr	r1, [r3, #8]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f000 f942 	bl	800215e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ee8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	609a      	str	r2, [r3, #8]
      break;
 8001ef2:	e04e      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6899      	ldr	r1, [r3, #8]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f000 f92b 	bl	800215e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f16:	609a      	str	r2, [r3, #8]
      break;
 8001f18:	e03b      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	461a      	mov	r2, r3
 8001f28:	f000 f8a2 	bl	8002070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2150      	movs	r1, #80	; 0x50
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f8f9 	bl	800212a <TIM_ITRx_SetConfig>
      break;
 8001f38:	e02b      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6859      	ldr	r1, [r3, #4]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	461a      	mov	r2, r3
 8001f48:	f000 f8c0 	bl	80020cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2160      	movs	r1, #96	; 0x60
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f8e9 	bl	800212a <TIM_ITRx_SetConfig>
      break;
 8001f58:	e01b      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6859      	ldr	r1, [r3, #4]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f000 f882 	bl	8002070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2140      	movs	r1, #64	; 0x40
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 f8d9 	bl	800212a <TIM_ITRx_SetConfig>
      break;
 8001f78:	e00b      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f000 f8d0 	bl	800212a <TIM_ITRx_SetConfig>
        break;
 8001f8a:	e002      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001f8c:	bf00      	nop
 8001f8e:	e000      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001f90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a29      	ldr	r2, [pc, #164]	; (8002064 <TIM_Base_SetConfig+0xb8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00b      	beq.n	8001fdc <TIM_Base_SetConfig+0x30>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fca:	d007      	beq.n	8001fdc <TIM_Base_SetConfig+0x30>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a26      	ldr	r2, [pc, #152]	; (8002068 <TIM_Base_SetConfig+0xbc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d003      	beq.n	8001fdc <TIM_Base_SetConfig+0x30>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a25      	ldr	r2, [pc, #148]	; (800206c <TIM_Base_SetConfig+0xc0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d108      	bne.n	8001fee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a1c      	ldr	r2, [pc, #112]	; (8002064 <TIM_Base_SetConfig+0xb8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00b      	beq.n	800200e <TIM_Base_SetConfig+0x62>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffc:	d007      	beq.n	800200e <TIM_Base_SetConfig+0x62>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a19      	ldr	r2, [pc, #100]	; (8002068 <TIM_Base_SetConfig+0xbc>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d003      	beq.n	800200e <TIM_Base_SetConfig+0x62>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a18      	ldr	r2, [pc, #96]	; (800206c <TIM_Base_SetConfig+0xc0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d108      	bne.n	8002020 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a07      	ldr	r2, [pc, #28]	; (8002064 <TIM_Base_SetConfig+0xb8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d103      	bne.n	8002054 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	615a      	str	r2, [r3, #20]
}
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	40012c00 	.word	0x40012c00
 8002068:	40000400 	.word	0x40000400
 800206c:	40000800 	.word	0x40000800

08002070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	f023 0201 	bic.w	r2, r3, #1
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800209a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f023 030a 	bic.w	r3, r3, #10
 80020ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	621a      	str	r2, [r3, #32]
}
 80020c2:	bf00      	nop
 80020c4:	371c      	adds	r7, #28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f023 0210 	bic.w	r2, r3, #16
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	031b      	lsls	r3, r3, #12
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	4313      	orrs	r3, r2
 8002100:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002108:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	621a      	str	r2, [r3, #32]
}
 8002120:	bf00      	nop
 8002122:	371c      	adds	r7, #28
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	f043 0307 	orr.w	r3, r3, #7
 800214c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	609a      	str	r2, [r3, #8]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800215e:	b480      	push	{r7}
 8002160:	b087      	sub	sp, #28
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002178:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	021a      	lsls	r2, r3, #8
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	431a      	orrs	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4313      	orrs	r3, r2
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	609a      	str	r2, [r3, #8]
}
 8002192:	bf00      	nop
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e046      	b.n	8002242 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a16      	ldr	r2, [pc, #88]	; (800224c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d00e      	beq.n	8002216 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002200:	d009      	beq.n	8002216 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d004      	beq.n	8002216 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a10      	ldr	r2, [pc, #64]	; (8002254 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d10c      	bne.n	8002230 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800221c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	4313      	orrs	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	40012c00 	.word	0x40012c00
 8002250:	40000400 	.word	0x40000400
 8002254:	40000800 	.word	0x40000800

08002258 <__libc_init_array>:
 8002258:	b570      	push	{r4, r5, r6, lr}
 800225a:	2600      	movs	r6, #0
 800225c:	4d0c      	ldr	r5, [pc, #48]	; (8002290 <__libc_init_array+0x38>)
 800225e:	4c0d      	ldr	r4, [pc, #52]	; (8002294 <__libc_init_array+0x3c>)
 8002260:	1b64      	subs	r4, r4, r5
 8002262:	10a4      	asrs	r4, r4, #2
 8002264:	42a6      	cmp	r6, r4
 8002266:	d109      	bne.n	800227c <__libc_init_array+0x24>
 8002268:	f000 f822 	bl	80022b0 <_init>
 800226c:	2600      	movs	r6, #0
 800226e:	4d0a      	ldr	r5, [pc, #40]	; (8002298 <__libc_init_array+0x40>)
 8002270:	4c0a      	ldr	r4, [pc, #40]	; (800229c <__libc_init_array+0x44>)
 8002272:	1b64      	subs	r4, r4, r5
 8002274:	10a4      	asrs	r4, r4, #2
 8002276:	42a6      	cmp	r6, r4
 8002278:	d105      	bne.n	8002286 <__libc_init_array+0x2e>
 800227a:	bd70      	pop	{r4, r5, r6, pc}
 800227c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002280:	4798      	blx	r3
 8002282:	3601      	adds	r6, #1
 8002284:	e7ee      	b.n	8002264 <__libc_init_array+0xc>
 8002286:	f855 3b04 	ldr.w	r3, [r5], #4
 800228a:	4798      	blx	r3
 800228c:	3601      	adds	r6, #1
 800228e:	e7f2      	b.n	8002276 <__libc_init_array+0x1e>
 8002290:	080022e8 	.word	0x080022e8
 8002294:	080022e8 	.word	0x080022e8
 8002298:	080022e8 	.word	0x080022e8
 800229c:	080022ec 	.word	0x080022ec

080022a0 <memset>:
 80022a0:	4603      	mov	r3, r0
 80022a2:	4402      	add	r2, r0
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d100      	bne.n	80022aa <memset+0xa>
 80022a8:	4770      	bx	lr
 80022aa:	f803 1b01 	strb.w	r1, [r3], #1
 80022ae:	e7f9      	b.n	80022a4 <memset+0x4>

080022b0 <_init>:
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	bf00      	nop
 80022b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b6:	bc08      	pop	{r3}
 80022b8:	469e      	mov	lr, r3
 80022ba:	4770      	bx	lr

080022bc <_fini>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	bf00      	nop
 80022c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c2:	bc08      	pop	{r3}
 80022c4:	469e      	mov	lr, r3
 80022c6:	4770      	bx	lr
